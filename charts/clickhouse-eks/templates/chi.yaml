# ClickHouse using default storage class.
apiVersion: "clickhouse.altinity.com/v1"
kind: "ClickHouseInstallation"
metadata:

  name: "{{ .Values.clickhouse.name }}"
  labels:
    application_group: "{{ .Values.all.metadata.labels.application_group }}"
spec:
  defaults:
    templates:
      serviceTemplate: "{{ .Values.clickhouse.service_type }}"
  configuration:
    users:
      {{ .Values.clickhouse.user }}/networks/ip: 0.0.0.0/0
      {{ .Values.clickhouse.user }}/access_management: 1
      {{ .Values.clickhouse.user }}/password:
        valueFrom:
          secretKeyRef:
            name: clickhouse-credentials
            key: password
    clusters:
      - name: "{{ .Values.clickhouse.cluster }}"
        layout:
          shards:
            - replicas:
                {{- range .Values.clickhouse.zones }}
                - templates:
                    podTemplate: replica-in-zone-{{ . }}
                {{- end }}
        templates:
          podTemplate: replica
          volumeClaimTemplate: storage
    zookeeper:
        nodes:
        - host: "{{ .Values.clickhouse.keeper_name }}"
          port: 2181
  templates:
    podTemplates:
      {{- range .Values.clickhouse.zones }}
      - name: replica-in-zone-{{ . }}
        zone:
          values:
            - {{ . }}
        podDistribution:
          - type: ClickHouseAntiAffinity
            scope: ClickHouseInstallation
        spec:
          containers:
          - name: clickhouse
            image: {{ $.Values.clickhouse.image }}
          nodeSelector:
            node.kubernetes.io/instance-type: {{ $.Values.clickhouse.node_selector }}
          tolerations:
            - key: "dedicated"
              operator: "EQUAL"
              value: "clickhouse"
              effect: "NO_SCHEDULE"
      {{- end }}
    volumeClaimTemplates:
      - name: storage
        reclaimPolicy: Retain
        metadata:
          labels:
            application_group: "{{ .Values.all.metadata.labels.application_group }}"
        spec:
          storageClassName: "{{ .Values.clickhouse.storage_class_name }}"
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: "{{ .Values.clickhouse.storage }}"
    serviceTemplates:
      - name: cluster-ip
        metadata:
          labels:
            application_group: "{{ .Values.all.metadata.labels.application_group }}"
        spec:
          type: ClusterIP
          clusterIP: None
          ports:
            - name: http
              port: 8123
              targetPort: 8123
            - name: tcp
              port: 9000
              targetPort: 9000

      - name: loadbalancer-internal
        metadata:
          labels:
            application_group: "{{ .Values.all.metadata.labels.application_group }}"
          annotations:
            cloud.google.com/load-balancer-type: "Internal"
            service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
            service.beta.kubernetes.io/azure-load-balancer-internal: "true"
            service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
            service.beta.kubernetes.io/cce-load-balancer-internal-vpc: "true"
        spec:
          type: "LoadBalancer"
          ports:
            - name: http
              port: 8123
              targetPort: 8123
            - name: tcp
              port: 9000
              targetPort: 9000

      - name: loadbalancer-external
        metadata:
          labels:
            application_group: "{{ .Values.all.metadata.labels.application_group }}"
        spec:
          type: "LoadBalancer"
          ports:
            - name: http
              port: 8123
              targetPort: 8123
            - name: tcp
              port: 9000
              targetPort: 9000

